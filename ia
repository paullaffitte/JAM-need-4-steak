#!/usr/bin/env python3

import sys
sys.path.insert(0, './python3/')
from napi import *
from math import *
from functools import reduce

N4S = Napi()

def getAverage(list):
    return reduce(lambda x, y: x + y, list) / len(list)

def getSplitedRays():
    rays = N4S.getRays()
    left = rays[:12]
    right = rays[-12:]
    center = rays[12:20]
    return {'left': left, 'right': right, 'center': center}

def getComputedRays():
    splited = getSplitedRays()
    return {'left': getAverage(splited['left']), 'right': getAverage(splited['right']), 'center': getAverage(splited['center'])}

def getSpeed(computed):
    speed = (computed['center'] / 2000) * 2
    if (computed['center'] < 20):
        speed = -1
    return speed

def getAlpha(speed, computed):
    alpha = 0
    right = computed['right']
    left = computed['left']

    N4S.debug(str(left) + " , " + str(right))
    if right > left:
        alpha = -(right / left % (min(speed, 0.1))) * (1 / speed)
    elif left > right:
        alpha = (left / right % (min(speed, 0.1))) * (1 / speed)
    else:
        alpha = 0

    N4S.debug(str(alpha))
    return alpha

def my_custom_update():
    computed =  getComputedRays();
    speed    =  getSpeed(computed)
    alpha    =  getAlpha(speed, computed)
    middle   =  N4S.getRayAt(15)

    N4S.setThrust( speed, refresh = True )
    N4S.setDirection( alpha, refresh = True )

if __name__ == '__main__':
    N4S.start(my_custom_update)